syntax = "proto3";
option go_package = "listing";
package listing;

import "google/api/annotations.proto";
// import "google/protobuf/any.proto";
// import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// option (gogoproto.populate_all) = true;

// MODEL 

message Photo {
    string id = 1;
    string src = 2;
    string base64 = 3;
    string name = 4;
    string caption = 5;
}

// @inject_tag: bson:"_id,omitempty"
message Address {
    float lat = 1;
    float lng = 2;
    // @inject_tag: bson:"address_1,omitempty"
    string address_1 = 3;
    // @inject_tag: bson:"address_2,omitempty"
    string address_2 = 4;
    // @inject_tag: bson:"postal_code,omitempty"
    string postal_code = 5;
    string city = 6;
    string state = 7;
    string country = 8;
    string country_code = 9;
}

// We need to inject the tags to ensure the naming in the database is correct
message Listing {
    string id = 1; // [(gogoproto.jsontag) = "MyField1", (gogoproto.moretags) = "xml:\",comment\""];
    // @inject_tag: bson:"created_at,omitempty"
    int64 created_at = 2; 
    // @inject_tag: bson:"modified_at,omitempty"
    int64 modified_at = 3;
    string title = 4;
    float cost = 5;
    string description = 6;
    // @inject_tag: bson:"cover_photo,omitempty"
    string cover_photo = 7;
    Address address = 8;
    // @inject_tag: bson:"is_published,omitempty"
    bool is_published = 9;
    // @inject_tag: bson:"is_available,omitempty"
    bool is_available = 10;
}

// GET ONE

message GetListingRequest {
    string id = 1;
}

message GetListingResponse {
    Listing data = 1;
}

// GET MANY

message GetListingsRequest {

}

message GetListingsResponse {
    repeated Listing data = 1;
}

// POST

message PostListingRequest {
    // string id = 1;
    // @inject_tag: bson:"created_at,omitempty"
    int64 created_at = 2; 
    // @inject_tag: bson:"modified_at,omitempty"
    int64 modified_at = 3;
    string title = 4;
    float cost = 5;
    string description = 6;
    // @inject_tag: bson:"cover_photo,omitempty"
    string cover_photo = 7;
    Address address = 8;
    // @inject_tag: bson:"is_published,omitempty"
    bool is_published = 9;
    // @inject_tag: bson:"is_available,omitempty"
    bool is_available = 10;
    string currency = 11;
    string user_id = 12;
}

message PostListingResponse {
    string msg = 1;
}

// PATCH

message UpdateListingRequest {
    string id = 1;
    int64 created_at = 2; 
    int64 modified_at = 3;
    string title = 4;
    float cost = 5;
    string description = 6;
    string cover_photo = 7;
    Address address = 8;
    bool is_published = 9;
    bool is_available = 10;
}

message UpdateListingResponse {
    string msg = 11;
}

// DELETE

message DeleteListingRequest {
    string id = 1;
}

message DeleteListingResponse {
    string msg = 11;
}

// SERVICE

service ListingService {
    rpc GetHealth (GetHealthRequest) returns (GetHealthResponse) {
        option (google.api.http) = {
            get: "/v1/health"
        };
    }
    // Only display published listings
    rpc GetListing (GetListingRequest) returns (GetListingResponse) {
        option (google.api.http) = {
            get: "/v1/listings/{id}"
        };
    }
    // Only display published listings
    rpc GetListings (GetListingsRequest) returns (GetListingsResponse) {
        option (google.api.http) = {
            get: "/v1/listings"
        };
    }
    // Get drafts
    // Get photos
    rpc PostListing (PostListingRequest) returns (PostListingResponse) {
        option (google.api.http) = {
            post: "/v1/listings",
            body: "*"
        };
    }
    rpc UpdateListing (UpdateListingRequest) returns (UpdateListingResponse) {
        option (google.api.http) = {
            patch: "/v1/listings/{id}",
            body: "*"
        };
    }
    rpc DeleteListing (DeleteListingRequest) returns (DeleteListingResponse) {
        option (google.api.http) = {
            delete: "/v1/listings/{id}"
        };
    }
}
